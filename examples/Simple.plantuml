@startuml
skin rose

'[code] private:
'[code]   void action1() { LOGD("[ACTION %s]\n", __func__); }
'[code]   void action3() { LOGD("[ACTION %s]\n", __func__); }
'[code]   void action4() { LOGD("[ACTION %s]\n", __func__); }
'[code]   void action5() { LOGD("[ACTION %s]\n", __func__); }
'[code]   void action6() { LOGD("[ACTION %s]\n", __func__); }
'[code]   void action7() { LOGD("[ACTION %s]\n", __func__); }
'[code]   void action8() { LOGD("[ACTION %s]\n", __func__); }
'[code]   void action9() { LOGD("[ACTION %s]\n", __func__); }
'[code]   void action10() { LOGD("[ACTION %s]\n", __func__); }
'[code]
'[code] private:
'[code]   bool guard1 = true;
'[code]   bool guard3 = true;
'[code]   bool guard6 = true;

[*] -> State1

State1 --> State2 : event1 [ guard1 ] / action1()
State1 <-- State2 : event2
State2 -> [*] : event6

State1 : comment / Ceci est l'etat 1
State1 : entry / action7()
State1 : exit / action8()
State1 : on event3 [ guard3 ] / action3()
' FIXME not managed State1 : on event4 / action4()

State2 : comment / Ceci est l'etat 2
State2 : entry / action9()
State2 : exit / action10()
State2 : on event5 / action5()
' FIXME not managed State2 : on event6 [ guard6 ] / action6()

@enduml
