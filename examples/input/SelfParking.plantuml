@startuml
' skin rose
' hide empty description

'header #include <qq>
'footer ffffffff
'init init
'code private:
'code int foo();
'test tttttttt
'test aaaa

[*] --> IDLE

IDLE --> SCAN_PARKING_SPOTS : turning indicator [ !isParked() ]\n--\nm_fsm_scan.reset()
IDLE --> COMPUTE_LEAVING_TRAJECTORY : turning indicator [ isParked() ]

SCAN_PARKING_SPOTS --> COMPUTE_ENTERING_TRAJECTORY : [ m_fsm_scan.status() == PARKING_SLOT_FOUND ]
SCAN_PARKING_SPOTS --> TRAJECTORY_DONE : [ m_fsm_scan.status() == PARKING_SLOT_NOT_FOUND ]
SCAN_PARKING_SPOTS --> SCAN_PARKING_SPOTS : [ m_fsm_scan.status() == PARKING_SEARCHING ]
SCAN_PARKING_SPOTS : activity / m_fsm_scan.update(dt)

COMPUTE_ENTERING_TRAJECTORY --> DRIVE_ALONG_TRAJECTORY: [ hasTrajectory() ]
COMPUTE_ENTERING_TRAJECTORY --> IDLE: [ !canPark() ]
COMPUTE_ENTERING_TRAJECTORY : entering / computeTrajectoryEnteringSlot()

COMPUTE_LEAVING_TRAJECTORY --> TRAJECTORY_DONE : [ !hasTrajectory() ]
COMPUTE_LEAVING_TRAJECTORY : entering / computeTrajectoryLeavingSlot()

DRIVE_ALONG_TRAJECTORY --> TRAJECTORY_DONE : [ !drive ]
DRIVE_ALONG_TRAJECTORY : activity / driveAlongTrajectory()

TRAJECTORY_DONE --> IDLE
TRAJECTORY_DONE : entering / setRefSpeed(0.0f)
TRAJECTORY_DONE : entering / turning_indicator(false, false)

COMPUTE_ENTERING_TRAJECTORY --> TRAJECTORY_DONE : [ !hasTrajectory() ]

COMPUTE_LEAVING_TRAJECTORY --> DRIVE_ALONG_TRAJECTORY: [ hasTrajectory() ]

@enduml
